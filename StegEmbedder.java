import java.awt.image.BufferedImage;
import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Random;
import javax.imageio.ImageIO;

/**
 * This class embeds text into an image
 * using a key given by the user
 */
public class StegEmbedder {

	private static final int UNCONVENTIONAL_565 = -1;
	
	private final Random random;
	private final File outFile;
	private final BufferedImage image;
	private final InputStream msg;
	private final String format;
	
	/**
	 * Constructor
	 * @param inFile The input image file to embed text in
	 * @param key The key used to embed the text
	 * @param outFile The output image file generated by this program
	 * @param msg The message to embed
	 * @throws Exception
	 */
	public StegEmbedder(final File inFile, final long key, final File outFile, final InputStream msg) throws Exception {
		
		format = (inFile.getName().endsWith("bmp")) ? "bmp" : "png";
		random = new Random(key);
		image = ImageIO.read(inFile);
		this.msg = msg;
		this.outFile = outFile;
	}
	
	/*
	 * Embed the message into the input image and create the output image from the stegged image
	 */
	public final void embedMessage() throws Exception {
		
		int pCount = 0;
		switch(image.getType()) {
		
		case BufferedImage.TYPE_3BYTE_BGR:
		case BufferedImage.TYPE_INT_RGB:
		case BufferedImage.TYPE_INT_BGR:
			pCount = 3;
			break;
			
		case BufferedImage.TYPE_4BYTE_ABGR:
		case BufferedImage.TYPE_4BYTE_ABGR_PRE:
		case BufferedImage.TYPE_INT_ARGB:
		case BufferedImage.TYPE_INT_ARGB_PRE:
			pCount = 4;
			break;
			
		case BufferedImage.TYPE_USHORT_565_RGB:
			pCount = UNCONVENTIONAL_565;
			break;
			
		default:
			throw new IllegalStateException();
		}
		if(pCount > 0) {
			embedConventional(pCount);
		}else{
			embed2Byte565();
		}
		ImageIO.write(image, format, outFile);
	}
	
	/*
	 * Embed text in a conventinal 3 Byte RGB or 4 Byte ARGB image
	 */
	private final void embedConventional(final int pCount) throws Exception {
		
		boolean flag = false;
		final int size = image.getWidth() * image.getHeight();
		final ArrayList<Integer> indices = new ArrayList<Integer>(size);
		for(int i=0;i<size;i++) {
			indices.add(i);
		}
		int temp, cCount = 0, rIndex, pIndex, pixel, x, y, c, mask;
		rIndex = random.nextInt(indices.size());
		pIndex = indices.get(rIndex);
		indices.remove(rIndex);
		x = pIndex % image.getWidth();
		y = pIndex / image.getWidth();
		pixel = image.getRGB(x, y);
		while((c = msg.read()) != -1 || !flag) {
			mask = 0x80;
			if(c == -1) {
				c = 0;
				flag = true;
			}
			for(int i=0;i<8;i++) {
				if(cCount >= pCount) {
					image.setRGB(x, y, pixel);
					if(indices.size() < 1) {
						break;
					}
					rIndex = random.nextInt(indices.size());
					pIndex = indices.get(rIndex);
					indices.remove(rIndex);
					x = pIndex % image.getWidth();
					y = pIndex / image.getWidth();
					pixel = image.getRGB(x, y);
					cCount = 0;
				}
				temp = 1;
				temp <<= (8 * (pCount - cCount - 1));
				pixel &= ~temp;
				if((c & mask) == 0) {
					temp = 0;
				}
				pixel |= temp;
				cCount++;
				mask >>= 1;
			}
			if(cCount > 0) {
				image.setRGB(x, y, pixel);
			}
		}
	}
	
	/*
	 * Embed text in a 2 Byte 565 RGB image
	 */
	private final void embed2Byte565() throws Exception {
		
		boolean flag = false;
		final int size = image.getWidth() * image.getHeight();
		final ArrayList<Integer> indices = new ArrayList<Integer>(size);
		for(int i=0;i<size;i++) {
			indices.add(i);
		}
		int temp, cCount = 0, rIndex, pIndex, pixel, x, y, c, mask;
		rIndex = random.nextInt(indices.size());
		pIndex = indices.get(rIndex);
		indices.remove(rIndex);
		x = pIndex % image.getWidth();
		y = pIndex / image.getWidth();
		pixel = image.getRGB(x, y);
		while(true) {
			mask = 0x80;
			if((c = msg.read()) == -1) {
				if(flag) {
					break;
				}else {
					flag = true;
				}
			}
			for(int i=0;i<8;i++) {
				if(cCount >= 3) {
					image.setRGB(x, y, pixel);
					if(indices.size() < 1) {
						break;
					}
					rIndex = random.nextInt(indices.size());
					pIndex = indices.get(rIndex);
					indices.remove(rIndex);
					x = pIndex % image.getWidth();
					y = pIndex / image.getWidth();
					pixel = image.getRGB(x, y);
					cCount = 0;
				}
				temp = 1;
				temp <<= (cCount == 0) ? 11 : (cCount == 1) ? 5 : 0;
				pixel &= ~temp;
				if((c & mask) == 0) {
					temp = 0;
				}
				pixel |= temp;
				cCount++;
				mask >>= 1;
			}
		}
		if(cCount > 0) {
			image.setRGB(x, y, pixel);
		}
	}
}
